#include <vector>     vector<
#include <queue>      queue< priority_queue<
#include <set>        set< multiset<
#include <map>        map< multimap<
#include <bitset>     bitset<
#include <list>       list<
#include <deque>      deque<
#include <stack>      stack<
#include <complex>    complex<
#include <hash_map.h> hash_map<
#include <hash_set.h> hash_set<
#include <string>     string
#include <algorithm>  sort( stable_sort( make_heap( push_heap( pop_heap(
                      lower_bound( upper_bound( equal_range( binary_search(
                      find( find_first_of( count( min( max( swap( fill( copy(
                      next_permutation( prev_permutation(
                      remove( replace( reverse( rotate( random_shuffle(
                      min_element( max_element( nth_element( mismatch(
                      set_difference( set_intersection( set_union(
                      set_symmetric_difference( merge( unique( adjacent_find(
                      lexicographical_compare( lexicographical_compare_3way(
                      equal( includes(
#include <numeric>    accumulate( partial_sum( adjacent_difference(
                      inner_product(
#include <iostream>   cin cout cerr istream ostream
#include <fstream>    ifstream ofstream ifstream( ofstream(
#include <sstream>    istringstream ostringstream
#include <cassert>    assert(
#include <cmath>      sin( cos( tan( asin( acos( atan( atan2( sinh( cosh( tanh(
                      sqrt( hypot( abs( exp( pow( ceil( floor( fmod( log( log10(
                      fabs( M_PI
#include <cstdio>     printf( scanf( fprintf( fscanf( sprintf( sscanf(
                      getc( fgetc( putc( fputc( getchar( putchar( ungetc(
                      FILE stdin stdout stderr feof( fclose( fflush(
#include <cstdlib>    rand( srand(
#include <cstring>    memcpy( memmove( memchr( memset(
                      strcpy( strncpy( strcat( strncat( strcmp( strncmp(
                      strchr( strrchr( strstr( strtok( strlen(
#include <ctime>      time( clock( CLOCKS_PER_SEC
